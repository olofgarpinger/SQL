SQL course at Stanford Lagunita

Exercise 1 

Q1) Find the titles of all movies directed by Steven Spielberg. 

SELECT title
FROM Movie
WHERE director = "Steven Spielberg";

------------------------------------
Q2: Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. 

SELECT DISTINCT year
FROM Movie, Rating
WHERE Movie.mID = Rating.mID and stars > 3;

------------------------------------
Q3: Find the titles of all movies that have no ratings.

SELECT DISTINCT title
FROM Movie, Rating
WHERE Movie.mID NOT IN (SELECT mID FROM Rating);

------------------------------------
Q4: Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have 
    ratings with a NULL value for the date.

SELECT name
FROM Reviewer, Rating
where Rating.rID = Reviewer.rID and ratingDate IS NULL;

------------------------------------
Q5: Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, 
    and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number 
    of stars. 

SELECT name, title, stars, ratingDate
FROM (SELECT *
      FROM (SELECT *
            FROM Rating LEFT JOIN Movie USING(mID)) LEFT JOIN Reviewer USING(rID))
ORDER BY name, title, stars;

------------------------------------
Q6: For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second 
    time, return the reviewer's name and the title of the movie. 

SELECT name, title
FROM Reviewer 
JOIN (SELECT title, rID
      FROM Movie
      JOIN (SELECT R1.rID, R1.mID
            FROM Rating R1, Rating R2
            WHERE R1.mID = R2.mID AND R1.rID = R2.rID AND 
                  R1.ratingDate < R2.ratingDate AND R1.stars < R2.stars)
      USING(mID))
USING(rID);

------------------------------------
Q7: For each movie that has at least one rating, find the highest number of stars that movie received. Return 
    the movie title and number of stars. Sort by movie title. 

SELECT title, stars 
FROM Movie
JOIN Rating
USING(mID)
GROUP BY title
HAVING MAX(stars);

------------------------------------
Q8: For each movie, return the title and the 'rating spread', that is, the difference between highest and 
    lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. 

SELECT title, ratingSpread
FROM Movie, (SELECT mID, MAX(stars)-MIN(stars) AS ratingSpread
             FROM Rating
             GROUP BY mID) AS Spread
WHERE Movie.mID = Spread.mID
ORDER BY ratingSpread DESC, title;

------------------------------------
Q9: Find the difference between the average rating of movies released before 1980 and the average rating 
    of movies released after 1980. (Make sure to calculate the average rating for each movie, then the 
    average of those averages for movies before 1980 and movies after. Don't just calculate the overall 
    average rating before and after 1980.) 

SELECT max(avgRating)-min(avgRating)
FROM (SELECT avg(avgMovie) AS avgRating
      FROM Movie
      JOIN (SELECT mID, AVG(stars) AS avgMovie
            FROM Rating
            GROUP BY mID)
      USING(mID)
      WHERE year < 1980

      UNION

      SELECT avg(avgMovie) AS avgRating
      FROM Movie
      JOIN (SELECT mID, AVG(stars) AS avgMovie
            FROM Rating
            GROUP BY mID)
      USING(mID)
      WHERE year >= 1980);

------------------------------------

Exercise 1 

Q1) Find the names of all students who are friends with someone named Gabriel. 

SELECT ID1
FROM Friend
WHERE ID1 IN (SELECT ID FROM Highschooler WHERE name = "Gabriel");

SELECT name
FROM Highschooler
WHERE ID IN (SELECT DISTINCT ID2
             FROM Friend
             WHERE ID1 IN (SELECT ID 
                           FROM Highschooler 
                           WHERE name = "Gabriel"));

------------------------------------
Q2) For every student who likes someone 2 or more grades younger than themselves, return that student's 
    name and grade, and the name and grade of the student they like. 

SELECT H1.name, H1.grade, H2.name, H2.grade
FROM Highschooler H1
JOIN Likes L ON H1.ID = L.ID1
JOIN Highschooler H2 ON H2.ID = L.ID2
WHERE H1.grade > H2.grade+1;
